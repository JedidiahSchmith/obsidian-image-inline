
/*
THIS IS A GENERATED/BUNDLED FILE BY ESBUILD
if you want to view the source, please visit the github repository of this plugin
*/

var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);

// src/main.ts
var main_exports = {};
__export(main_exports, {
  default: () => ImageInlinePlugin
});
module.exports = __toCommonJS(main_exports);
var import_obsidian3 = require("obsidian");

// src/utils/conversion.ts
var Base64File = class _Base64File {
  constructor(buffer, filename) {
    this.buffer = buffer;
    this.filename = filename || "image";
  }
  get size() {
    return this.buffer.byteLength;
  }
  to64String() {
    const bytes = new Uint8Array(this.buffer);
    let binary = "";
    for (let i = 0; i < bytes.byteLength; i++) {
      binary += String.fromCharCode(bytes[i]);
    }
    return btoa(binary);
  }
  to64Link() {
    return `![${this.filename}](data:image/png;base64,${this.to64String()})`;
  }
  //class methods
  static from64Link(link) {
    const match = link.match(/!\[(.*?)\]\(data:image\/png;base64,(.*?)\)/);
    if (!match) return null;
    const filename = match[1];
    const base64 = match[2];
    const buffer = Buffer.from(base64, "base64");
    return new _Base64File(buffer, filename);
  }
  static from64String(base64, filename) {
    const buffer = Buffer.from(base64, "base64");
    return new _Base64File(buffer, filename);
  }
  static async fromFile(file) {
    const arrayBuffer = await file.arrayBuffer();
    return new _Base64File(arrayBuffer, file.name);
  }
  static async fromTFile(tfile) {
    const arrayBuffer = await tfile.vault.readBinary(tfile);
    return new _Base64File(arrayBuffer, tfile.name);
  }
};
var Base64Conversion = class {
  async fromClipboardEvent(event) {
    var _a;
    const items = (_a = event.clipboardData) == null ? void 0 : _a.items;
    if (!items) return null;
    for (let i = 0; i < items.length; i++) {
      const item = items[i];
      if (item.type.startsWith("image/")) {
        const file = item.getAsFile();
        if (file) {
          return this.fromFile(file);
        }
      }
    }
    return null;
  }
  async fromClipboard() {
    try {
      const items = await navigator.clipboard.read();
      for (const item of items) {
        if (item.types.includes("image/png") || item.types.includes("image/jpeg")) {
          const blob = await item.getType("image/png") || await item.getType("image/jpeg");
          if (blob) {
            const arrayBuffer = await blob.arrayBuffer();
            return new Base64File(arrayBuffer);
          }
        }
      }
    } catch (error) {
      console.error("Error reading from clipboard:", error);
    }
    return null;
  }
  async fromFile(file) {
    const arrayBuffer = await file.arrayBuffer();
    return new Base64File(arrayBuffer);
  }
  async fromTFile(tfile) {
    const arrayBuffer = await tfile.vault.readBinary(tfile);
    return new Base64File(arrayBuffer);
  }
  async resize(file, percentage) {
    return new Promise((resolve, reject) => {
      const blob = new Blob([file.buffer]);
      const imageUrl = URL.createObjectURL(blob);
      const img = new Image();
      img.onload = () => {
        const canvas = document.createElement("canvas");
        const ctx = canvas.getContext("2d");
        if (!ctx) {
          reject(new Error("Could not get canvas context"));
          return;
        }
        const newWidth = Math.round(img.width * (percentage / 100));
        const newHeight = Math.round(img.height * (percentage / 100));
        canvas.width = newWidth;
        canvas.height = newHeight;
        ctx.drawImage(img, 0, 0, newWidth, newHeight);
        canvas.toBlob((blob2) => {
          if (!blob2) {
            reject(new Error("Could not create blob from canvas"));
            return;
          }
          blob2.arrayBuffer().then((arrayBuffer) => {
            URL.revokeObjectURL(imageUrl);
            resolve(new Base64File(arrayBuffer));
          }).catch(reject);
        }, "image/png");
      };
      img.onerror = () => {
        URL.revokeObjectURL(imageUrl);
        reject(new Error("Failed to load image"));
      };
      img.src = imageUrl;
    });
  }
};

// src/coms/antiLinkExpand.ts
var import_view = require("@codemirror/view");
var ImageWidget = class extends import_view.WidgetType {
  constructor(imageName) {
    super();
    this.imageName = imageName;
  }
  toDOM() {
    const span = document.createElement("span");
    span.textContent = `...`;
    return span;
  }
};
var linkDecorations = import_view.ViewPlugin.fromClass(class {
  constructor(view) {
    this.decorations = this.buildDecorations(view);
  }
  update(update) {
    if (update.docChanged || update.viewportChanged) {
      this.decorations = this.buildDecorations(update.view);
    }
  }
  buildDecorations(view) {
    const decorations = [];
    const text = view.state.doc.toString();
    const regex = /data:image\/[^;]+;base64,[^)]+/g;
    let match;
    while ((match = regex.exec(text)) !== null) {
      const start = match.index;
      const end = start + match[0].length;
      decorations.push(import_view.Decoration.replace({
        widget: new ImageWidget(match[0]),
        inclusive: true
      }).range(start, end));
    }
    return import_view.Decoration.set(decorations, true);
  }
}, {
  decorations: (v) => v.decorations
});

// src/comsContext/export.ts
var import_obsidian = require("obsidian");
var ExportToVaultModal = class extends import_obsidian.Modal {
  constructor(app, filename, buffer) {
    super(app);
    this.filename = filename;
    this.buffer = buffer;
  }
  onOpen() {
    const { contentEl } = this;
    contentEl.createEl("h2", { text: "Export to Vault" });
    const form = contentEl.createEl("form");
    const filenameContainer = form.createEl("div", { cls: "setting-item" });
    filenameContainer.createEl("label", { text: "Filename" });
    const filenameInput = filenameContainer.createEl("input", {
      type: "text",
      value: this.filename
    });
    const buttonContainer = form.createEl("div", { cls: "setting-item" });
    const exportButton = buttonContainer.createEl("button", {
      text: "Save to Vault",
      cls: "mod-cta"
    });
    exportButton.addEventListener("click", async (e) => {
      e.preventDefault();
      const filename = filenameInput.value || "image.png";
      const activeFile = this.app.workspace.getActiveFile();
      if (activeFile) {
        const targetPath = await this.app.fileManager.getAvailablePathForAttachment(
          filename,
          activeFile.path
        );
        await this.app.vault.createBinary(
          targetPath,
          this.buffer
        );
        new import_obsidian.Notice(`Image saved to ${targetPath}`);
      }
      this.close();
    });
  }
  onClose() {
    const { contentEl } = this;
    contentEl.empty();
  }
};
async function registerExportToLocal(plugin) {
  plugin.registerEvent(
    plugin.app.workspace.on("editor-menu", (menu, editor) => {
      const cursor = editor.getCursor();
      const line = editor.getLine(cursor.line);
      const base64Regex = /!\[.*?\]\(data:image\/[^;]+;base64,[^)]+\)/;
      const isBase64Image = base64Regex.test(line);
      if (isBase64Image) {
        menu.addItem((item) => {
          item.setTitle("Export to Vault").setIcon("vault").onClick(async () => {
            const base64Match = line.match(/data:image\/[^;]+;base64,([^)]+)/);
            if (!base64Match) return;
            const base64Data = base64Match[1];
            const buffer = Buffer.from(base64Data, "base64");
            new ExportToVaultModal(plugin.app, "image.png", buffer).open();
          });
        });
      }
    })
  );
}

// src/comsContext/convert.ts
var import_obsidian2 = require("obsidian");
var ConvertToBase64Modal = class extends import_obsidian2.Modal {
  constructor(app, file, editor) {
    super(app);
    this.file = file;
    this.editor = editor;
  }
  async onOpen() {
    const { contentEl } = this;
    contentEl.createEl("h2", { text: "Convert to Base64" });
    try {
      const arrayBuffer = await this.app.vault.readBinary(this.file);
      const base64 = btoa(String.fromCharCode(...new Uint8Array(arrayBuffer)));
      const mimeType = this.file.extension === "png" ? "image/png" : "image/jpeg";
      const base64Data = `data:${mimeType};base64,${base64}`;
      const markdown = `![[${this.file.name}]]`;
      const newMarkdown = `![${this.file.name}](${base64Data})`;
      const cursor = this.editor.getCursor();
      const line = this.editor.getLine(cursor.line);
      const newLine = line.replace(markdown, newMarkdown);
      const lineStart = this.editor.posToOffset({ line: cursor.line, ch: 0 });
      const lineEnd = this.editor.posToOffset({ line: cursor.line, ch: line.length });
      this.editor.replaceRange(
        newLine,
        this.editor.offsetToPos(lineStart),
        this.editor.offsetToPos(lineEnd)
      );
      new import_obsidian2.Notice("Image converted to base64");
    } catch (error) {
      new import_obsidian2.Notice("Failed to convert image: " + error.message);
    }
    this.close();
  }
  onClose() {
    const { contentEl } = this;
    contentEl.empty();
  }
};
async function registerConvertImage(plugin) {
  plugin.registerEvent(
    plugin.app.workspace.on("editor-menu", async (menu, editor) => {
      const cursor = editor.getCursor();
      const line = editor.getLine(cursor.line);
      const imageRegex = /!\[\[([^\]\n]+\.(png|jpg|jpeg))\]\]/;
      const match = line.match(imageRegex);
      if (match) {
        const imagePath = match[1];
        const activeFile = plugin.app.workspace.getActiveFile();
        if (!activeFile) return;
        const file = plugin.app.metadataCache.getFirstLinkpathDest(imagePath, activeFile.path);
        console.log("Original path:", imagePath);
        console.log("File:", file);
        if (file instanceof import_obsidian2.TFile) {
          menu.addItem((item) => {
            item.setTitle("Convert to Base64").setIcon("code-glyph").onClick(async () => {
              new ConvertToBase64Modal(plugin.app, file, editor).open();
            });
          });
        }
      }
    })
  );
}

// src/main.ts
var DEFAULT_SETTINGS = {
  convertOnPaste: true,
  convertOnDrop: true,
  enableResizing: false,
  resizeStrategy: "smaller",
  smallerThreshold: 1e3,
  // 1MB default
  largerThreshold: 1e3,
  // 1MB default
  resizePercentage: 80,
  backupOriginalImage: true,
  resizeSmallerFiles: false
  // Default to false
};
var ImageInlinePlugin = class extends import_obsidian3.Plugin {
  async onload() {
    await this.loadSettings();
    this.conversion = new Base64Conversion();
    this.registerEditorExtension(linkDecorations);
    await registerExportToLocal(this);
    await registerConvertImage(this);
    this.registerEvent(
      this.app.workspace.on("editor-paste", async (evt, editor) => {
        var _a;
        if (!this.settings.convertOnPaste) return;
        const items = (_a = evt.clipboardData) == null ? void 0 : _a.items;
        if (!items) return;
        const allImages = Array.from(items).every((item) => item.type.startsWith("image/"));
        if (!allImages) return;
        evt.preventDefault();
        const base64Files = [];
        for (const item of Array.from(items)) {
          if (item.type.startsWith("image/")) {
            const file = item.getAsFile();
            if (file) {
              const base64File = await this.conversion.fromFile(file);
              base64Files.push(base64File);
            }
          }
        }
        if (base64Files.length > 0) {
          await this.handleImages(base64Files, editor);
        }
      })
    );
    this.registerEvent(
      this.app.workspace.on("editor-drop", async (evt, editor) => {
        var _a;
        if (!this.settings.convertOnDrop) return;
        const files = (_a = evt.dataTransfer) == null ? void 0 : _a.files;
        if (!files || files.length === 0) return;
        const allImages = Array.from(files).every((file) => file.type.startsWith("image/"));
        if (!allImages) return;
        evt.preventDefault();
        const base64Files = [];
        for (const file of Array.from(files)) {
          if (file.type.startsWith("image/")) {
            const base64File = await this.conversion.fromFile(file);
            base64Files.push(base64File);
          }
        }
        if (base64Files.length > 0) {
          await this.handleImages(base64Files, editor);
        }
      })
    );
    this.addSettingTab(new ImageInlineSettingTab(this.app, this));
  }
  async handleImages(base64Files, editor) {
    try {
      if (!this.settings.enableResizing) {
        const markdown = base64Files.map((file) => file.to64Link()).join("\n");
        editor.replaceSelection(markdown);
        return;
      }
      const processedFiles = [];
      const attachments = [];
      for (const base64File of base64Files) {
        const sizeInKB = base64File.size / 1024;
        if (this.settings.resizeStrategy === "smaller") {
          if (sizeInKB <= this.settings.smallerThreshold) {
            processedFiles.push(base64File);
          } else {
            attachments.push(base64File);
          }
        } else {
          if (sizeInKB > this.settings.largerThreshold) {
            const resizedFile = await this.conversion.resize(base64File, this.settings.resizePercentage);
            processedFiles.push(resizedFile);
            if (this.settings.backupOriginalImage) {
              const activeFile = this.app.workspace.getActiveFile();
              if (activeFile) {
                const timestamp = (/* @__PURE__ */ new Date()).toISOString().replace(/[:.]/g, "-");
                const backupFilename = `${base64File.filename.replace(".png", "")}_original_${timestamp}.png`;
                const targetPath = await this.app.fileManager.getAvailablePathForAttachment(
                  backupFilename,
                  activeFile.path
                );
                const file = new File([base64File.buffer], backupFilename, { type: "image/png" });
                await this.app.vault.createBinary(
                  targetPath,
                  await file.arrayBuffer()
                );
              }
            }
          } else {
            processedFiles.push(base64File);
          }
        }
      }
      if (processedFiles.length > 0) {
        const markdown = processedFiles.map((file) => file.to64Link()).join("\n");
        editor.replaceSelection(markdown);
      }
      if (attachments.length > 0) {
        new import_obsidian3.Notice(`${attachments.length} image(s) will be saved as attachments`);
        for (const attachment of attachments) {
          const activeFile = this.app.workspace.getActiveFile();
          if (activeFile) {
            const file = new File([attachment.buffer], attachment.filename, { type: "image/png" });
            const targetPath = await this.app.fileManager.getAvailablePathForAttachment(
              attachment.filename,
              activeFile.path
            );
            const newFile = await this.app.vault.createBinary(
              targetPath,
              await file.arrayBuffer()
            );
            const link = this.app.fileManager.generateMarkdownLink(
              newFile,
              activeFile.path
            );
            editor.replaceSelection(link + "\n");
          }
        }
      }
    } catch (error) {
      new import_obsidian3.Notice("Failed to process images: " + error.message);
    }
  }
  async loadSettings() {
    this.settings = Object.assign({}, DEFAULT_SETTINGS, await this.loadData());
  }
  async saveSettings() {
    await this.saveData(this.settings);
  }
};
var ImageInlineSettingTab = class extends import_obsidian3.PluginSettingTab {
  constructor(app, plugin) {
    super(app, plugin);
    this.plugin = plugin;
  }
  display() {
    const { containerEl } = this;
    containerEl.empty();
    containerEl.createEl("h2", { text: "General Settings" });
    new import_obsidian3.Setting(containerEl).setName("Convert on paste").setDesc("Convert images pasted into the editor to base64").addToggle((toggle) => toggle.setValue(this.plugin.settings.convertOnPaste).onChange(async (value) => {
      this.plugin.settings.convertOnPaste = value;
      await this.plugin.saveSettings();
    }));
    new import_obsidian3.Setting(containerEl).setName("Convert on drop").setDesc("Convert images dropped into the editor to base64").addToggle((toggle) => toggle.setValue(this.plugin.settings.convertOnDrop).onChange(async (value) => {
      this.plugin.settings.convertOnDrop = value;
      await this.plugin.saveSettings();
    }));
    containerEl.createEl("h2", { text: "Image Resizing" });
    new import_obsidian3.Setting(containerEl).setName("Enable resizing").setDesc("Enable image resizing features").addToggle((toggle) => toggle.setValue(this.plugin.settings.enableResizing).onChange(async (value) => {
      this.plugin.settings.enableResizing = value;
      await this.plugin.saveSettings();
      this.display();
    }));
    if (this.plugin.settings.enableResizing) {
      new import_obsidian3.Setting(containerEl).setName("Resizing strategy").setDesc("Choose how to handle image resizing").addDropdown((dropdown) => dropdown.addOption("smaller", "Convert small images to base64").addOption("larger", "Resize large images").setValue(this.plugin.settings.resizeStrategy).onChange(async (value) => {
        this.plugin.settings.resizeStrategy = value;
        await this.plugin.saveSettings();
        this.display();
      }));
      if (this.plugin.settings.resizeStrategy === "smaller") {
        new import_obsidian3.Setting(containerEl).setName("Size threshold").setDesc("Images smaller than this size (in KB) will be converted to base64").addText((text) => text.setValue(this.plugin.settings.smallerThreshold.toString()).onChange(async (value) => {
          const num = Number(value);
          if (!isNaN(num)) {
            this.plugin.settings.smallerThreshold = num;
            await this.plugin.saveSettings();
          }
        }));
      } else {
        new import_obsidian3.Setting(containerEl).setName("Size threshold").setDesc("Images larger than this size (in KB) will be resized").addText((text) => text.setValue(this.plugin.settings.largerThreshold.toString()).onChange(async (value) => {
          const num = Number(value);
          if (!isNaN(num)) {
            this.plugin.settings.largerThreshold = num;
            await this.plugin.saveSettings();
          }
        }));
        new import_obsidian3.Setting(containerEl).setName("Resize percentage").setDesc("Percentage to resize images to (1-100)").addSlider((slider) => slider.setLimits(1, 100, 1).setValue(this.plugin.settings.resizePercentage).setDynamicTooltip().onChange(async (value) => {
          this.plugin.settings.resizePercentage = value;
          await this.plugin.saveSettings();
        }));
        new import_obsidian3.Setting(containerEl).setName("Backup original images").setDesc("Save original images to media folder when resizing").addToggle((toggle) => toggle.setValue(this.plugin.settings.backupOriginalImage).onChange(async (value) => {
          this.plugin.settings.backupOriginalImage = value;
          await this.plugin.saveSettings();
        }));
        new import_obsidian3.Setting(containerEl).setName("Resize smaller files").setDesc("Also resize files smaller than the threshold when using larger strategy").addToggle((toggle) => toggle.setValue(this.plugin.settings.resizeSmallerFiles).onChange(async (value) => {
          this.plugin.settings.resizeSmallerFiles = value;
          await this.plugin.saveSettings();
        }));
      }
    }
  }
};
